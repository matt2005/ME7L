#!/usr/bin/perl

use strict 'vars';

use Getopt::Std;
use File::Basename;

our $opt_t='example_template.cfg';
our $opt_e=undef;

our $usage="usage: gen-cfg [-t template.cfg] [-e ecufile.ecu] list.lst ..";

getopts("t:e:") || die($usage);

die($usage) unless (scalar(@ARGV)>=1);

open(TEMPLATE, '<', $opt_t) || die("Can't open $opt_t");

if (defined($opt_e)) {
    open(ECUFILE, '<', $opt_e) || die("Can't open $opt_e");
}


my %list;

foreach my $file (@ARGV) {
    my($fn, $dir, $suffix) = fileparse($file, qr/\.[^.]*/);
    die("Would overwrite input file $fn.cfg. Use a different suffix") if $suffix eq '.cfg';
    open(LIST, '<', $file) || die ("Can't open $file");

    %{$list{$fn}{'vars'}}=();
    while(<LIST>) {
	chomp;
	s{^\s+|\s+$}{}g;
	${$list{$fn}{'vars'}}{$_}=1;
    }
    my $ofn = $dir.$fn.".cfg";
    open($list{$fn}{'out'}, '>', $ofn)
	|| die ("Can't open $ofn for writing");
    print("Generating $fn.cfg from $opt_t and $file\n");
}

while(<TEMPLATE>) {
    my $line = $_;
    while((my $fn, my $l) = each %list) {
	my $out = $line;
	for my $v (keys %{$l->{'vars'}}) {
	    if ($out =~ s/^;$v(\s)/$v \1/) {
		#print "found $v in $fn.cfg for $opt_t\n";
		delete(${$list{$fn}{'vars'}}{$v});
		break;
	    }
	    $v=~s/;//;
	    if ($out =~ /^;$v(\s)/) {
		#print "found ;$v in $fn.cfg for $opt_t\n";
		delete(${$list{$fn}{'vars'}}{";$v"});
		break;
	    }
	}
	print {$l->{'out'}} $out;
    }
}

if (defined($opt_e)) {
    my @ary = map { chomp; [split ','] } <ECUFILE>;
    foreach my $line (@ary) {
	s{^\s+|\s+$}{}g foreach @{$line};
	while((my $fn, my $l) = each %list) {
	    for my $v (keys %{$l->{'vars'}}) {
		my $v0 = $v;
                $v0 =~ s/;//;
		if ($line->[0] eq $v0) {
		    #print "found missing $line->[0] ($v->$v0) from $fn.cfg in $opt_e\n";
		    printf {$l->{'out'}} "%-18s;%-35s; %s\n", $v, $line->[1], $line->[10];
		    delete(${$list{$fn}{'vars'}}{$v});
		}
	    }
	}
    }
}

while((my $fn, my $l) = each %list) {
    for my $v (keys %{$l->{'vars'}}) {
	print "Could not find $v for $fn.cfg\n" unless ($v =~ /^;/);
	#print {$l->{'out'}} "$v\n";
    }
}
